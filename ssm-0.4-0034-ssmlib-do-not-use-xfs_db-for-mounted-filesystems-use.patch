From 343ef41e9a03516891fd2fe3228ad3d5bc2ade44 Mon Sep 17 00:00:00 2001
From: "Nitin U. Yewale" <nyewale@redhat.com>
Date: Wed, 9 Jan 2019 17:20:50 +0530
Subject: [PATCH 08/22] ssmlib: do not use xfs_db for mounted filesystems, use
 statvfs

The xfs_db tool should not be used for a mounted filesystem, as it
bypasses various OS caches and can provide stale data.

E.g., after a resize of a xfs volume, xfs_db can report the old, pre-resize
size for about half a minute with default XFS configuration.  By using
statvfs() for mounted XFS partitions, this issue is eliminated.

RHBZ 1664652

Signed-off-by: Nitin U. Yewale <nyewale@redhat.com>
Signed-off-by: Jan Tulak <jtulak@redhat.com>
---
 ssmlib/main.py | 52 +++++++++++++++++++++++++++++++-------------------
 ssmlib/misc.py |  1 -
 2 files changed, 32 insertions(+), 21 deletions(-)

diff --git a/ssmlib/main.py b/ssmlib/main.py
index 4a1f22a..0957b60 100644
--- a/ssmlib/main.py
+++ b/ssmlib/main.py
@@ -321,26 +321,38 @@ class FsInfo(object):
         return misc.run(command, stdout=True)[0]
 
     def xfs_get_info(self, dev):
-        command = ["xfs_db", "-r", "-c", "sb", "-c", "print", dev]
-        if not misc.check_binary(command[0]):
-            return
-        output = misc.run(command)[1]
-
-        for line in output.split("\n")[1:]:
-            array = line.split("=")
-            if len(array) == 2:
-                self.fs_info[array[0].rstrip()] = array[1].lstrip()
-
-        bsize = int(self.fs_info['blocksize'])
-        bcount = int(self.fs_info['dblocks'])
-        lbcount = int(self.fs_info['logblocks'])
-        bcount -= lbcount
-        agcount = int(self.fs_info['agcount'])
-        fbcount = int(self.fs_info['fdblocks'])
-        fbcount -= 4 + (4 + agcount)
-        self.data['fs_size'] = bcount * bsize // 1024
-        self.data['fs_free'] = fbcount * bsize // 1024
-        self.data['fs_used'] = (bcount - fbcount) * bsize // 1024
+        # Never use xfs_db for a mounted filesystem - such use is unsupported
+        # by XFS and almost guaranteed to report stale data.
+        mount_point = misc.get_mounts(dev).get(dev, {}).get('mp', None)
+        if mount_point:
+            stat = os.statvfs(mount_point)
+            total = stat.f_blocks*stat.f_bsize
+            free = stat.f_bfree*stat.f_bsize
+            used = (stat.f_blocks-stat.f_bfree)*stat.f_bsize
+            self.data['fs_size'] = total
+            self.data['fs_free'] = free
+            self.data['fs_used'] = used
+        else :
+            command = ["xfs_db", "-r", "-c", "sb", "-c", "print", dev]
+            if not misc.check_binary(command[0]):
+                return
+            output = misc.run(command)[1]
+
+            for line in output.split("\n")[1:]:
+                    array = line.split("=")
+                    if len(array) == 2:
+                        self.fs_info[array[0].rstrip()] = array[1].lstrip()
+
+            bsize = int(self.fs_info['blocksize'])
+            bcount = int(self.fs_info['dblocks'])
+            lbcount = int(self.fs_info['logblocks'])
+            bcount -= lbcount
+            agcount = int(self.fs_info['agcount'])
+            fbcount = int(self.fs_info['fdblocks'])
+            fbcount -= 4 + (4 + agcount)
+            self.data['fs_size'] = bcount * bsize // 1024
+            self.data['fs_free'] = fbcount * bsize // 1024
+            self.data['fs_used'] = (bcount - fbcount) * bsize // 1024
 
     def xfs_fsck(self):
         command = ['xfs_repair', '-n']
diff --git a/ssmlib/misc.py b/ssmlib/misc.py
index 280cd6e..9790e7a 100644
--- a/ssmlib/misc.py
+++ b/ssmlib/misc.py
@@ -359,7 +359,6 @@ def get_mountinfo(regex=".*"):
             mounts[dev] = row
     return mounts
 
-
 def get_mounts_old(regex=".*"):
     mounts = {}
     reg = re.compile(regex)
-- 
2.21.0

