From 80dac4d9cb83cf2a6b95648ab868208d31dc7fa3 Mon Sep 17 00:00:00 2001
From: Jan Tulak <jtulak@redhat.com>
Date: Tue, 25 Sep 2018 12:12:13 +0200
Subject: [PATCH 11/22] ssmlib: missing pwquality should not crash the whole
 ssm

The pwquality python binding is needed only for creating encrypted
volumes, and not every distribution has it easily available. Simplify
the life of the users by requiring it only for the creation of encrypted
volumes, and even then allow the user to force the password if pwquality
is not available.

Signed-off-by: Jan Tulak <jtulak@redhat.com>
---
 ssmlib/main.py    | 27 ++++++++++++++++++++-------
 ssmlib/problem.py | 13 +++++++++++--
 2 files changed, 31 insertions(+), 9 deletions(-)

diff --git a/ssmlib/main.py b/ssmlib/main.py
index 355c0e8..07bc038 100644
--- a/ssmlib/main.py
+++ b/ssmlib/main.py
@@ -22,13 +22,18 @@ import stat
 import atexit
 import argparse
 import getpass
-import pwquality
 from ssmlib import misc
 from ssmlib import problem
 
 # Import backends
 from ssmlib.backends import lvm, crypt, btrfs, md
 
+# conditional import of pwquality
+try:
+    import pwquality
+except ImportError:
+    pwquality = None
+
 EXTN = ['ext2', 'ext3', 'ext4']
 SUPPORTED_FS = ['xfs', 'btrfs'] + EXTN
 SUPPORTED_BACKENDS = ['lvm', 'btrfs', 'crypt']
@@ -1224,12 +1229,20 @@ class StorageHandle(object):
             raise problem.GeneralError("The passwords entered do not match.")
 
         # check password strength before we do anything
-        try:
-            pwq = pwquality.PWQSettings()
-            pwq.check(password)
-        except pwquality.PWQError as ex:
-            if not PR.check(PR.WEAK_PASSWORD, ex[1]):
-                raise problem.WeakPassword(ex[1])
+        if pwquality:
+            # pwquality is installed
+            try:
+                pwq = pwquality.PWQSettings()
+                pwq.check(password)
+            except pwquality.PWQError as ex:
+                if not PR.check(PR.WEAK_PASSWORD, ex[1]):
+                    raise problem.WeakPassword(ex[1])
+                else:
+                    force_weak_password = True
+        else:
+            # pwquality is not installed
+            if not PR.check(PR.TOOL_MISSING_PROMPT, ["Python binding for pwquality", "SSM can't verify password strength."]):
+                raise problem.ToolMissingPrompt("Python binding for pwquality is not installed, SSM couldn't verify password strength.")
             else:
                 force_weak_password = True
 
diff --git a/ssmlib/problem.py b/ssmlib/problem.py
index 0321a34..b349d61 100644
--- a/ssmlib/problem.py
+++ b/ssmlib/problem.py
@@ -20,8 +20,8 @@ import sys
 __all__ = ["ProblemSet", "SsmError", "GeneralError", "ProgrammingError",
            "BadEnvVariable", "NotEnoughSpace", "ResizeMatch", "FsNotSpecified",
            "DeviceUsed", "ExistingFilesystem", "NoDevices", "ToolMissing",
-           "CanNotRun", "CommandFailed", "UserInterrupted", "NotSupported",
-           "NotImplemented", "WeakPassword"]
+           "ToolMissingPrompt", "CanNotRun", "CommandFailed", "UserInterrupted",
+           "NotSupported", "NotImplemented", "WeakPassword"]
 
 # Define prompt codes
 PROMPT_NONE =           0
@@ -122,6 +122,11 @@ class ToolMissing(SsmError):
         super(ToolMissing, self).__init__(msg, errcode)
 
 
+class ToolMissingPrompt(SsmError):
+    def __init__(self, msg, errcode=2010):
+        super(ToolMissingPrompt, self).__init__(msg, errcode)
+
+
 class CanNotRun(SsmError):
     def __init__(self, msg, errcode=2011):
         super(CanNotRun, self).__init__(msg, errcode)
@@ -246,6 +251,10 @@ class ProblemSet(object):
             ['The password is too weak: {0}.\n',
              PROMPT_CONTINUE, FL_FORCE_YES | FL_DEFAULT_NO, WeakPassword]
 
+        self.TOOL_MISSING_PROMPT = \
+            ['\'{0}\' is not installed on the system! {1}',
+             PROMPT_CONTINUE, FL_FORCE_YES | FL_DEFAULT_NO, ToolMissingPrompt]
+
     def _can_print_message(self, flags):
         if (flags & FL_DEBUG_ONLY):
             return self.options.debug
-- 
2.21.0

