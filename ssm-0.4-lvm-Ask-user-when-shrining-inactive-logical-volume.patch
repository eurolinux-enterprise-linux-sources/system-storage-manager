From 117b46062c12ebd3af0862ab66fdea7eb416cc1b Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Tue, 4 Feb 2014 15:12:14 +0100
Subject: [PATCH 1/5] lvm: Ask user when shrining inactive logical volume

When resizing inactive logical volume we can not tell what is present on
the volume itself. If there is a file system we will not get notify and
we could possibly lose data if an error has been made.

Fix this by checking whether the volume is active on the resize
(srhinking specifically), warn user about this fact and let him abort
the action.

Also add appropriate unittests and bashtests.

Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---
 ssmlib/backends/lvm.py            | 32 ++++++++++++++++++++++++++++----
 ssmlib/problem.py                 |  7 +++++--
 tests/bashtests/004-lvm-resize.sh |  8 ++++++++
 tests/unittests/common.py         | 15 +++++++++++----
 tests/unittests/test_lvm.py       | 13 +++++++++++--
 5 files changed, 63 insertions(+), 12 deletions(-)

diff --git a/ssmlib/backends/lvm.py b/ssmlib/backends/lvm.py
index 4022034..d6e3171 100644
--- a/ssmlib/backends/lvm.py
+++ b/ssmlib/backends/lvm.py
@@ -20,6 +20,7 @@ import os
 import stat
 import datetime
 from ssmlib import misc
+from ssmlib import problem
 from ssmlib.backends import template
 
 __all__ = ["PvsInfo", "VgsInfo", "LvsInfo"]
@@ -62,6 +63,21 @@ class LvmInfo(template.Backend):
         self.attrs = []
         self.binary = misc.check_binary('lvm')
         self.default_pool_name = SSM_LVM_DEFAULT_POOL
+        self.init_local_problem_set()
+
+    def parse_attr(self, lv, attr):
+        if attr[4] == 'a':
+            lv['active'] = True
+        else:
+            lv['active'] = False
+
+    def init_local_problem_set(self):
+        self.DEVICE_INACTIVE = \
+            ['Device \'{0}\' is not active! It might contain filesystem we\'re unable to detect and it may be destroyed by this operation.',
+             problem.PROMPT_CONTINUE,
+             problem.FL_DEFAULT_NO | problem.FL_EXIT_ON_NO | problem.FL_FORCE_YES,
+             problem.GeneralError]
+
 
     def run_lvm(self, command, noforce=False):
         if not self.binary:
@@ -283,9 +299,9 @@ class LvsInfo(LvmInfo, template.BackendVolume):
         super(LvsInfo, self).__init__(*args, **kwargs)
         command = ["lvm", "lvs", "--separator", "|", "--noheadings",
                    "--nosuffix", "--units", "k", "-o",
-                   "vg_name,lv_size,stripes,stripesize,segtype,lv_name,origin"]
+                   "vg_name,lv_size,stripes,stripesize,segtype,lv_name,origin,lv_attr"]
         self.attrs = ['pool_name', 'vol_size', 'stripes',
-                      'stripesize', 'type', 'lv_name', 'origin']
+                      'stripesize', 'type', 'lv_name', 'origin', 'attr']
         self.handle_fs = True
         self.mounts = misc.get_mounts('{0}/mapper'.format(DM_DEV_DIR))
         self._parse_data(command)
@@ -295,6 +311,7 @@ class LvsInfo(LvmInfo, template.BackendVolume):
                                               lv['lv_name'])
         if lv['origin']:
             lv['hide'] = True
+
         lv['real_dev'] = misc.get_real_device(lv['dev_name'])
 
         sysfile = "/sys/block/{0}/dm/name".format(
@@ -312,6 +329,7 @@ class LvsInfo(LvmInfo, template.BackendVolume):
 
         if lv['real_dev'] in self.mounts:
             lv['mount'] = self.mounts[lv['real_dev']]['mp']
+        self.parse_attr(lv, lv['attr'])
 
     def __getitem__(self, name):
         if name in self.data.iterkeys():
@@ -349,6 +367,10 @@ class LvsInfo(LvmInfo, template.BackendVolume):
     def resize(self, lv, size, resize_fs=True):
         lv = self._get_dev_name(lv)
         command = ['lvresize', '-L', str(size) + 'k', lv]
+        vol = self[lv]
+        if vol['active'] == False and \
+           size < float(vol['vol_size']):
+            self.problem.check(self.DEVICE_INACTIVE, lv)
         if resize_fs:
             command.insert(1, '-r')
         self.run_lvm(command)
@@ -372,10 +394,10 @@ class SnapInfo(LvmInfo):
         command = ["lvm", "lvs", "--separator", "|", "--noheadings",
                    "--nosuffix", "--units", "k", "-o",
                    "vg_name,lv_size,stripes,stripesize,segtype," +
-                   "lv_name,origin,snap_percent"]
+                   "lv_name,origin,snap_percent,lv_attr"]
         self.attrs = ['pool_name', 'vol_size', 'stripes',
                       'stripesize', 'type', 'lv_name', 'origin',
-                      'snap_size']
+                      'snap_size', 'attr']
         self.handle_fs = True
         self.mounts = misc.get_mounts('{0}/mapper'.format(DM_DEV_DIR))
         self._parse_data(command)
@@ -414,3 +436,5 @@ class SnapInfo(LvmInfo):
 
         if snap['dm_name'] in self.mounts:
             snap['mount'] = self.mounts[snap['dm_name']]['mp']
+
+        self.parse_attr(snap, snap['attr'])
diff --git a/ssmlib/problem.py b/ssmlib/problem.py
index f8fb4ce..e1cdd81 100644
--- a/ssmlib/problem.py
+++ b/ssmlib/problem.py
@@ -31,6 +31,7 @@ PROMPT_IGNORE =         3
 PROMPT_REMOVE =         4
 PROMPT_ADJUST =         5
 PROMPT_USE =            6
+PROMPT_CONTINUE =       7
 
 PROMPT_MSG = [
         None,
@@ -40,6 +41,7 @@ PROMPT_MSG = [
         'Remove',
         'Adjust',
         'Use anyway',
+        'Continue',
         ]
 
 # Define problem flags
@@ -312,10 +314,11 @@ class ProblemSet(object):
 
         if ((flags & FL_EXIT_ON_NO) and (not res)) or \
            ((flags & FL_EXIT_ON_YES) and res):
+            msg = "Terminated by user!"
             if exc:
-                raise exc(message)
+                raise exc(msg)
             else:
-                raise Exception(message)
+                raise Exception(msg)
 
         return res
 
diff --git a/tests/bashtests/004-lvm-resize.sh b/tests/bashtests/004-lvm-resize.sh
index c863f36..6b9b341 100755
--- a/tests/bashtests/004-lvm-resize.sh
+++ b/tests/bashtests/004-lvm-resize.sh
@@ -215,6 +215,14 @@ ssm -f resize -s +$((DEV_SIZE/2))M  $SSM_LVM_DEFAULT_POOL/$lvol1 $dev2 $dev3
 check lv_field $SSM_LVM_DEFAULT_POOL/$lvol1 pv_count 3
 ssm -f remove --all
 
+# Try to resize inactive volume
+ssm create --fs ext4 --size ${DEV_SIZE}M $dev1 $dev2 $dev3
+lvchange -a n $SSM_LVM_DEFAULT_POOL/$lvol1
+ssm resize --size +${DEV_SIZE}M $DM_DEV_DIR/$SSM_LVM_DEFAULT_POOL/$lvol1
+not ssm resize -s-${DEV_SIZE}M $DM_DEV_DIR/$SSM_LVM_DEFAULT_POOL/$lvol1
+ssm -f resize -s-${DEV_SIZE}M $DM_DEV_DIR/$SSM_LVM_DEFAULT_POOL/$lvol1
+check lv_field $SSM_LVM_DEFAULT_POOL/$lvol1 lv_size ${DEV_SIZE}.00m
+ssm -f remove --all
 
 # Use device already used in different pool
 ssm create $dev1
diff --git a/tests/unittests/common.py b/tests/unittests/common.py
index 58c5637..a255c43 100644
--- a/tests/unittests/common.py
+++ b/tests/unittests/common.py
@@ -230,12 +230,12 @@ class MockSystemDataSource(unittest.TestCase):
                 'vol_count': '0'}
 
     def _addVol(self, vol_name, vol_size, stripes, pool_name, devices,
-                mount=None):
+                mount=None, active=True):
         pool_data = self.pool_data[pool_name]
         pool_free = float(pool_data['pool_free']) - vol_size
         pool_used = float(pool_data['pool_used']) + vol_size
-	pool_data['pool_free'] = pool_free
-	pool_data['pool_used'] = pool_used
+        pool_data['pool_free'] = pool_free
+        pool_data['pool_used'] = pool_used
         if mount:
             self.pool_data[pool_name]['mount'] = mount
             self._addDir(mount)
@@ -276,8 +276,15 @@ class MockSystemDataSource(unittest.TestCase):
             vol_type = "linear"
             stripesize = 0
         vol_name = "/dev/{0}/{1}".format(pool_name, vol_name)
+        attr="-wi------"
+        if active == True:
+            tmp = list(attr)
+            tmp[4] = 'a'
+            attr = "".join(tmp)
         self.vol_data[vol_name] = {'dm_name': vol_name,
                 'real_dev': vol_name, 'stripes': stripes, 'dev_name': vol_name,
                 'stripesize': 0, 'pool_name': pool_name, 'vol_size': vol_size,
                 'dev_size': vol_size, 'type': vol_type, 'origin': "",
-                'mount': mount}
+                'mount': mount, 'attr': attr}
+
+
diff --git a/tests/unittests/test_lvm.py b/tests/unittests/test_lvm.py
index 7af8a78..5096544 100644
--- a/tests/unittests/test_lvm.py
+++ b/tests/unittests/test_lvm.py
@@ -58,10 +58,10 @@ class LvmFunctionCheck(MockSystemDataSource):
                         data['pool_size'], data['pool_free'], data['vol_count'])
         elif cmd[1] == 'lvs':
             for vol, data in self.vol_data.iteritems():
-                output += "{0}|{1}|{2}|{3}|{4}|{5}|{6}\n".format(data['pool_name'],
+                output += "{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}\n".format(data['pool_name'],
                         data['vol_size'], data['stripes'], data['stripesize'],
                         data['type'], data['dev_name'].split("/")[-1],
-                        data['origin'])
+                        data['origin'], data['attr'])
         if 'return_stdout' in kwargs and not kwargs['return_stdout']:
             output = None
         return (0, output)
@@ -332,6 +332,15 @@ class LvmFunctionCheck(MockSystemDataSource):
         self._checkCmd("ssm resize -s +1.5T /dev/my_pool/vol001 /dev/sdb /dev/sda /dev/sdc1",
             [], "lvm lvresize -L 1613595352.0k /dev/my_pool/vol001")
 
+        # Test resize on inactive volume
+        self._addVol('vol004', 8192, 1, 'default_pool', ['/dev/sdd'], None, False)
+        self._checkCmd("ssm resize", ['--size +4m', '/dev/default_pool/vol004'],
+            "lvm lvresize -L 12288.0k /dev/default_pool/vol004")
+        self.assertRaises(Exception, main.main, "ssm resize -s-2m /dev/default_pool/vol004")
+        # We can force it though
+        self._checkCmd("ssm -f resize", ['-s-2m', '/dev/default_pool/vol004'],
+            "lvm lvresize -f -L 6144.0k /dev/default_pool/vol004")
+
     def test_lvm_add(self):
         default_pool = lvm.SSM_LVM_DEFAULT_POOL
 
-- 
1.8.3.1

