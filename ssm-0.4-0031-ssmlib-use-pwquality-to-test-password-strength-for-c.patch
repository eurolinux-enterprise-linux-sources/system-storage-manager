From 9c5605711545d42025ccefac23e5fdf237d07bc9 Mon Sep 17 00:00:00 2001
From: Jan Tulak <jtulak@redhat.com>
Date: Wed, 17 Jan 2018 12:41:03 +0100
Subject: [PATCH 05/22] ssmlib: use pwquality to test password strength for
 cryptsetup

SSM created a LV and then tried to create encrypted volume on top of
that. However, if the passphrase was weak, cryptsetup failed and the
user was left with half of the changes done and had to undo them
manually.

Use pwquality to assess the provided password before ssm commits to any
changes at all. This means ssm will always ask, even if cryptsetup
itself is not configured to do it, but user can always force a weak
password.

Resolves: rhbz#1141871

Signed-off-by: Jan Tulak <jtulak@redhat.com>
Reviewed-by: Lukas Czerner <lczerner@redhat.com>
---
 INSTALL                             |  2 ++
 README                              |  2 ++
 doc/src/requirements.rst            |  1 +
 ssmlib/backends/crypt.py            | 24 ++++++++++++-----
 ssmlib/main.py                      | 42 ++++++++++++++++++++++++++++-
 ssmlib/problem.py                   | 10 ++++++-
 tests/bashtests/012-crypt-create.sh | 19 +++++++++++++
 7 files changed, 91 insertions(+), 9 deletions(-)

diff --git a/INSTALL b/INSTALL
index 8cff865..67916dc 100644
--- a/INSTALL
+++ b/INSTALL
@@ -36,6 +36,8 @@ Python modules
 
 * os
 
+* pwquality
+
 * re
 
 * sys
diff --git a/README b/README
index 31eb42f..74993a8 100644
--- a/README
+++ b/README
@@ -642,6 +642,8 @@ Python modules
 
 * os
 
+* pwquality
+
 * re
 
 * sys
diff --git a/ssmlib/backends/crypt.py b/ssmlib/backends/crypt.py
index 5da55db..b3cc32c 100644
--- a/ssmlib/backends/crypt.py
+++ b/ssmlib/backends/crypt.py
@@ -18,7 +18,9 @@
 import re
 import os
 import stat
+import tempfile
 from ssmlib import misc
+from ssmlib import problem
 from ssmlib.backends import template
 
 __all__ = ["DmCryptVolume"]
@@ -69,11 +71,14 @@ class DmObject(template.Backend):
            not misc.check_binary('cryptsetup'):
             return
 
-    def run_cryptsetup(self, command, stdout=True):
+    def run_cryptsetup(self, command, stdout=True, password=None):
         if not misc.check_binary('cryptsetup'):
             self.problem.check(self.problem.TOOL_MISSING, 'cryptsetup')
         command.insert(0, "cryptsetup")
-        return misc.run(command, stdout=stdout)
+        if password != None:
+            return misc.run(command, stdout=stdout, stdin_data=password)
+        else:
+            return misc.run(command, stdout=stdout)
 
 
 class DmCryptPool(DmObject, template.BackendPool):
@@ -89,10 +94,15 @@ class DmCryptPool(DmObject, template.BackendPool):
                 'hide': True}
         self.data[self.default_pool_name] = pool
         '''
+        self.passphrase = None
+        self.force_weak_password = False
+
+    def set_passphrase(self, passphrase, force=False):
+        self.passphrase = passphrase.encode()
+        self.force_weak_password = force
 
     def create(self, pool, size=None, name=None, devs=None,
                options=None):
-
         if CRYPTSETUP_VERSION < [1, 6, 0]:
             msg = "You need at least cryptsetup version " + \
                   "{0}. Creating encrypted volumes".format('1.6.0')
@@ -122,12 +132,12 @@ class DmCryptPool(DmObject, template.BackendPool):
             args.append('-q')
         if options['encrypt'] == "luks":
             command.extend(args)
-            if self.options.force:
+            if self.options.force or self.force_weak_password:
                 command.append('--force-password')
-            if self.options.interactive:
+            if self.options.interactive and not self.passphrase:
                 command.append('-y')
             command.extend(['luksFormat', device])
-            self.run_cryptsetup(command)
+            self.run_cryptsetup(command, password=self.passphrase)
         command = []
         command.extend(args)
         command.append('open')
@@ -136,7 +146,7 @@ class DmCryptPool(DmObject, template.BackendPool):
             size = str(float(size) * 2).split('.')[0]
             command.extend(['--size', size])
         command.extend(['--type', options['encrypt'], device, name])
-        self.run_cryptsetup(command)
+        self.run_cryptsetup(command, password=self.passphrase)
         return "{0}/mapper/{1}".format(DM_DEV_DIR, name)
 
     def _generate_devname(self):
diff --git a/ssmlib/main.py b/ssmlib/main.py
index 43bdbf3..51c2978 100644
--- a/ssmlib/main.py
+++ b/ssmlib/main.py
@@ -21,6 +21,8 @@ import sys
 import stat
 import atexit
 import argparse
+import getpass
+import pwquality
 from ssmlib import misc
 from ssmlib import problem
 
@@ -1180,6 +1182,37 @@ class StorageHandle(object):
         if new_size != vol_size:
             args.volume.resize(new_size, fs)
 
+    def get_check_passphrase(self):
+        """
+        Ask for a passphrase and check its quality.
+        """
+
+        def getpwd(text):
+            # gepass always requires tty access, so pipes would not work
+            if sys.stdin.isatty():
+                return getpass.getpass(text)
+            else:
+                return sys.stdin.readline()[:-1]
+
+        force_weak_password = False
+
+        password = getpwd('Enter passphrase: ')
+        password2 = getpwd('Verify passphrase: ')
+        if password != password2:
+            raise problem.GeneralError("The passwords entered do not match.")
+
+        # check password strength before we do anything
+        try:
+            pwq = pwquality.PWQSettings()
+            pwq.check(password)
+        except pwquality.PWQError as ex:
+            if not PR.check(PR.WEAK_PASSWORD, ex[1]):
+                raise problem.WeakPassword(ex[1])
+            else:
+                force_weak_password = True
+
+        return (password, force_weak_password)
+
     def create(self, args):
         """
         Create new volume (or subvolume in case of btrfs) using the devices
@@ -1190,11 +1223,18 @@ class StorageHandle(object):
             PR.warn("Mount options are set, but no mount point was " +
                     "provided. Device will not be mounted")
 
+        crypt = None
+        if args.encrypt or SSM_DEFAULT_BACKEND == 'crypt':
+            crypt = self.pool.get_backend("crypt")
+            # we have to check the password quality before we do any operation
+            # so check that now
+            (password, force_weak_password) = self.get_check_passphrase()
+            crypt.set_passphrase(password, force=force_weak_password)
+
         lvname = self.create_volume(args)
 
         if args.encrypt and misc.is_bdevice(lvname) and \
            SSM_DEFAULT_BACKEND != 'crypt':
-            crypt = self.pool.get_backend("crypt")
             args.pool = Item(crypt, crypt.default_pool_name)
             options = {'encrypt': args.encrypt}
             lvname = args.pool.create(devs=[lvname],
diff --git a/ssmlib/problem.py b/ssmlib/problem.py
index a07637a..0321a34 100644
--- a/ssmlib/problem.py
+++ b/ssmlib/problem.py
@@ -21,7 +21,7 @@ __all__ = ["ProblemSet", "SsmError", "GeneralError", "ProgrammingError",
            "BadEnvVariable", "NotEnoughSpace", "ResizeMatch", "FsNotSpecified",
            "DeviceUsed", "ExistingFilesystem", "NoDevices", "ToolMissing",
            "CanNotRun", "CommandFailed", "UserInterrupted", "NotSupported",
-           "NotImplemented"]
+           "NotImplemented", "WeakPassword"]
 
 # Define prompt codes
 PROMPT_NONE =           0
@@ -150,6 +150,10 @@ class NotImplemented(SsmError):
     def __init__(self, msg, errcode=2016):
         super(NotImplemented, self).__init__(msg, errcode)
 
+class WeakPassword(SsmError):
+    def __init__(self, msg, errcode=2017):
+        super(WeakPassword, self).__init__(msg, errcode)
+
 
 class ProblemSet(object):
 
@@ -238,6 +242,10 @@ class ProblemSet(object):
             ['Directory \'{0}\' does not exist!',
              PROMPT_CREATE, FL_FORCE_YES, None]
 
+        self.WEAK_PASSWORD = \
+            ['The password is too weak: {0}.\n',
+             PROMPT_CONTINUE, FL_FORCE_YES | FL_DEFAULT_NO, WeakPassword]
+
     def _can_print_message(self, flags):
         if (flags & FL_DEBUG_ONLY):
             return self.options.debug
diff --git a/tests/bashtests/012-crypt-create.sh b/tests/bashtests/012-crypt-create.sh
index 586bdf0..0b86c1b 100755
--- a/tests/bashtests/012-crypt-create.sh
+++ b/tests/bashtests/012-crypt-create.sh
@@ -55,6 +55,16 @@ which mkfs.ext2 && grep -E "^\sext[234]$" /proc/filesystems && fs2=ext2
 which mkfs.ext3 && grep -E "^\sext[34]$" /proc/filesystems && fs3=ext3
 which mkfs.xfs  && grep -E "^\sxfs$" /proc/filesystems && fs4=xfs
 
+# Try a short password with DEFAULT_BACKEND=crypt
+# Later in this test, check it again with a different backend, because
+# there are two paths in the code.
+! echo -e "a\na" | ssm create $dev1 -e luks
+! check list_table "$(ssm list vol)" $crypt_vol1 $SSM_CRYPT_DEFAULT_POOL none crypt
+# force it - not it should pass
+echo -e "a\na" | ssm -f create $dev1 -e luks
+check list_table "$(ssm list vol)" $crypt_vol1 $SSM_CRYPT_DEFAULT_POOL none crypt
+ssm remove ${DEV}/$crypt_vol1
+
 # Create encrypted volume
 pass | ssm create $dev1
 check crypt_vol_field $crypt_vol1 type LUKS1
@@ -102,6 +112,15 @@ lvol3=${LVOL_PREFIX}003
 lvol4=${LVOL_PREFIX}004
 export SSM_DEFAULT_BACKEND='lvm'
 
+# Try a short password with backend different than crypt
+! echo -e "a\na" | ssm create $dev1 -e luks
+! check crypt_vol_field $crypt_vol1 type LUKS1
+# force it
+echo -e "a\na" | ssm -f create $dev1 -e luks
+check crypt_vol_field $crypt_vol1 type LUKS1
+ssm remove ${DEV}/$crypt_vol1
+ssm -f remove $SSM_LVM_DEFAULT_POOL || true
+
 pass | ssm create --fs $fs3 $dev1 $dev2 $mnt1 -e
 check mountpoint $crypt_vol1 $mnt1
 check crypt_vol_field $crypt_vol1 type LUKS1
-- 
2.21.0

