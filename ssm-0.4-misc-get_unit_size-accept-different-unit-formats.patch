From ef26cf6fb0e33ca52f35fcf219fd21db7788c200 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Mon, 13 Jan 2014 16:29:01 +0100
Subject: [PATCH 01/10] misc: get_unit_size() accept different unit formats

Because btrfs recently changed it's output to use MiB format instead of
MB format the function handling this within the btrfs is broken.

Fix this my making get_unit_size() to handle different unit formats (M,
MB, MiB) and use that in btrfs as well.

Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---
 ssmlib/backends/btrfs.py | 18 ++---------
 ssmlib/misc.py           | 82 ++++++++++++++++++++++++++++++++++--------------
 test.py                  | 13 ++++----
 3 files changed, 69 insertions(+), 44 deletions(-)

diff --git a/ssmlib/backends/btrfs.py b/ssmlib/backends/btrfs.py
index a4aedda..eb23403 100644
--- a/ssmlib/backends/btrfs.py
+++ b/ssmlib/backends/btrfs.py
@@ -33,18 +33,6 @@ except KeyError:
     SSM_BTRFS_DEFAULT_POOL = "btrfs_pool"
 
 
-def get_real_number(string):
-    number = float(string[0:-2])
-    unit = string[-2:-1]
-    # The result will be in kilobytes
-    units = ["K", "M", "G", "T", "P", "E", "Z", "Y"]
-    for i, u in enumerate(units):
-        if u == unit:
-            number *= (2 ** (i * 10))
-            break
-    return number
-
-
 def get_btrfs_version():
     try:
         output = misc.run(['btrfs', '--version'], can_fail=True)[1]
@@ -128,7 +116,7 @@ class Btrfs(template.Backend):
 
             elif array[0] == 'Total':
                 pool['dev_count'] = array[2]
-                fs_used = get_real_number(array[6])
+                fs_used = float(misc.get_real_size(array[6]))
 
             elif array[0] == 'devid':
                 dev['dev_name'] = array[7]
@@ -154,9 +142,9 @@ class Btrfs(template.Backend):
                                 vol['real_dev'] = found[0].split(':')[0]
                                 break
 
-                dev_used = get_real_number(array[5])
+                dev_used = float(misc.get_real_size(array[5]))
                 dev['dev_used'] = str(dev_used)
-                fs_size += get_real_number(array[3])
+                fs_size += float(misc.get_real_size(array[3]))
 
                 dev_size = \
                     int(partitions[dev['dev_name'].rpartition("/")[-1]][2])
diff --git a/ssmlib/misc.py b/ssmlib/misc.py
index 3ff1577..bfaa1c4 100644
--- a/ssmlib/misc.py
+++ b/ssmlib/misc.py
@@ -32,34 +32,57 @@ TMP_MOUNTED = []
 
 def get_unit_size(string):
     """
-    Check the last character of the string for the unit and return the unit
-    value, otherwise return zero. It check only the last character of the
-    string.
+    Check the last character of the string for the unit and return the tuple
+    of unit value, unit name, otherwise return zero. It check only the first
+    character of the unit string.
 
     >>> get_unit_size("B")
-    1
+    (1, 'B')
     >>> get_unit_size("k")
-    1024
-    >>> get_unit_size("M")
-    1048576
-    >>> get_unit_size("g")
-    1073741824
-    >>> get_unit_size("T")
-    1099511627776...
-    >>> get_unit_size("p")
-    1125899906842624...
+    (1024, 'k')
+    >>> get_unit_size("KiB")
+    (1024, 'KiB')
+    >>> get_unit_size("KB")
+    (1024, 'KB')
+    >>> get_unit_size("10M")
+    (1048576, 'M')
+    >>> get_unit_size("-99.99g")
+    (1073741824, 'g')
+    >>> get_unit_size("-99.99GiB")
+    (1073741824, 'GiB')
+    >>> get_unit_size("+99.99G")
+    (1073741824, 'G')
+    >>> get_unit_size("+99.99gb")
+    (1073741824, 'gb')
+    >>> get_unit_size("99.99g")
+    (1073741824, 'g')
+    >>> get_unit_size("0.84T")
+    (1099511627776, 'T')
+    >>> get_unit_size("0.84TiB")
+    (1099511627776, 'TiB')
+    >>> get_unit_size("0p")
+    (1125899906842624, 'p')
+    >>> get_unit_size("99kit")
+    (0, '')
     >>> get_unit_size("")
-    0
+    (0, '')
     >>> get_unit_size("H")
-    0
+    (0, '')
     """
 
     mult = 0
     units = {'B': 1, 'K': 2 ** 10, 'M': 2 ** 20, 'G': 2 ** 30, 'T': 2 ** 40,
              'P': 2 ** 50}
-    if len(string) > 0 and string[-1].upper() in units:
-        mult = units[string[-1].upper()]
-    return mult
+    unit = re.sub(r'^\+?-?\d+(\.\d*)?', '', string)
+    if len(unit) > 0 and unit[0].upper() in units:
+        mult = units[unit[0].upper()]
+    all_units = {'B', 'K', 'M', 'G', 'T', 'P',
+                 'KB', 'MB', 'GB', 'TB', 'PB',
+                 'KIB', 'MIB', 'GIB', 'TIB', 'PIB'}
+    if unit.upper() in all_units:
+        return mult, unit
+    else:
+        return 0, ""
 
 
 def is_number(string):
@@ -92,8 +115,14 @@ def get_real_size(size):
 
     >>> get_real_size("3141")
     '3141'
+    >>> get_real_size("3141B")
+    '3.07'
     >>> get_real_size("3141K")
     '3141.00'
+    >>> get_real_size("3141KB")
+    '3141.00'
+    >>> get_real_size("3141KiB")
+    '3141.00'
     >>> get_real_size("3141k")
     '3141.00'
     >>> get_real_size("3141M")
@@ -118,6 +147,10 @@ def get_real_size(size):
     '-3.14'
     >>> get_real_size("3.14G")
     '3292528.64'
+    >>> get_real_size("3.14GB")
+    '3292528.64'
+    >>> get_real_size("3.14GiB")
+    '3292528.64'
     >>> get_real_size("+3.14g")
     '+3292528.64'
     >>> get_real_size("-3.14G")
@@ -133,12 +166,15 @@ def get_real_size(size):
     """
     if is_number(size):
         return size
-    elif is_number(size[:-1]):
+    else:
         # Always use kilobytes in ssm
-        mult = get_unit_size(size) / 1024
-        sign = '+' if size[0] == '+' else ''
-        if mult:
-            return '{0}{1:.2f}'.format(sign, float(size[:-1]) * mult)
+        mult, unit = get_unit_size(size)
+        mult /= float(1024)
+        number = re.sub(unit + "$", '', size)
+        if is_number(number):
+            sign = '+' if size[0] == '+' else ''
+            if mult:
+                return '{0}{1:.2f}'.format(sign, float(number) * mult)
     raise Exception("Not supported unit in the " +
                     "size \'{0}\' argument.".format(size))
 
diff --git a/test.py b/test.py
index 2ca542c..7c91ae8 100644
--- a/test.py
+++ b/test.py
@@ -89,17 +89,18 @@ def run_bash_tests():
 
 def quick_test():
     print "[+] Running doctests"
-    doctest_flags = doctest.IGNORE_EXCEPTION_DETAIL | doctest.ELLIPSIS
+    doctest_flags = doctest.IGNORE_EXCEPTION_DETAIL | doctest.ELLIPSIS | \
+                    doctest.REPORT_ONLY_FIRST_FAILURE
     result = doctest.testmod(main, exclude_empty=True, report=True,
-            raise_on_error=True, optionflags=doctest_flags)
+            raise_on_error=False, optionflags=doctest_flags)
     result = doctest.testmod(lvm, exclude_empty=True, report=True,
-            raise_on_error=True, optionflags=doctest_flags)
+            raise_on_error=False, optionflags=doctest_flags)
     result = doctest.testmod(crypt, exclude_empty=True, report=True,
-            raise_on_error=True, optionflags=doctest_flags)
+            raise_on_error=False, optionflags=doctest_flags)
     result = doctest.testmod(btrfs, exclude_empty=True, report=True,
-            raise_on_error=True, optionflags=doctest_flags)
+            raise_on_error=False, optionflags=doctest_flags)
     result = doctest.testmod(misc, exclude_empty=True, report=True,
-            raise_on_error=True, optionflags=doctest_flags)
+            raise_on_error=False, optionflags=doctest_flags)
     print "[+] Running unittests"
     test_loader = unittest.TestLoader()
     tests_lvm = test_loader.loadTestsFromModule(test_lvm)
-- 
1.8.3.1

