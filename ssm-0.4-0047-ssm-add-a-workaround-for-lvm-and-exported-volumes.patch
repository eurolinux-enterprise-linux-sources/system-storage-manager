From d5f676514320cca899335ada2b290a8c18dfb8c5 Mon Sep 17 00:00:00 2001
From: Jan Tulak <jtulak@redhat.com>
Date: Tue, 9 Jan 2018 11:53:52 +0100
Subject: [PATCH 21/22] ssm: add a workaround for lvm and exported volumes

When lvm lvs command is run on exported volumes, lvm ends with return
code 5 instead of 0 on a clean run. Because LVM people said that
this is intentional behaviour, it needs to be worked around in SSM.

This patch adds a condition that detects the mentioned issue and sets a
can_fail flag, so the error code is ignored.

Signed-off-by: Jan Tulak <jtulak@redhat.com>
---
 ssmlib/misc.py | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/ssmlib/misc.py b/ssmlib/misc.py
index 3b20850..cd0dda8 100644
--- a/ssmlib/misc.py
+++ b/ssmlib/misc.py
@@ -461,6 +461,25 @@ def humanize_size(arg):
         unit = "???"
     return ("{0:.2f} {1}").format(size, unit)
 
+def _can_fail_hacks(cmd, returncode, error):
+    """ A workaround for tools reporting weird exit codes. Return true
+        when a non-zero return code should be ignored.
+    """
+
+    if returncode == 5 \
+        and cmd[0:2] == ['lvm', 'lvs'] \
+        and str(error).endswith('is exported\n'):
+        # FIXME A workaround for LVM behaviour:
+        # lvm lvs' exit code is 5 on exported volumes, even if everything
+        # is ok. So, if the code is 5, command was 'lvm lvs ...'
+        # and error message says that a volume was exported, set up can_fail
+        # flag.
+        # We can't use per-object status, because that would break backward
+        # compatibility. And we can't deal with it on a higher level, because
+        # we don't have all the information then.
+        return True
+
+    return False
 
 def run(cmd, show_cmd=False, stdout=False, stderr=True, can_fail=False,
         stdin_data=None, return_stdout=True):
@@ -490,6 +509,9 @@ def run(cmd, show_cmd=False, stdout=False, stderr=True, can_fail=False,
     output, error = proc.communicate(input=stdin_data)
 
     err_msg = "ERROR running command: \"{0}\"".format(" ".join(cmd))
+    if _can_fail_hacks(cmd, proc.returncode, error):
+        can_fail = True
+
     if proc.returncode != 0 and show_cmd:
         if output is not None:
             print(output)
-- 
2.21.0

